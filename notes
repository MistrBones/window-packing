// Current problems:
// always results in square (less than optimally packed) outputs
// is this a real problem its kind of aesthetically nice for what we want





// broken:




// fixed:
// doesnt make perfect use of horizontal space since it always fills the entire vertical space
// the same arrangement of blocks fills the horizontal space better when the height is shorter
// this is because the shorter height forces block resizing, at some point blocks resize enough to make room for another column
// we can probably calculate roughly when this will happen and recursively change the canvas height 
// we could start by calculating the average column width and using that as a target
// get the widthDifference between all block widths and total canvas width
// get the extraSpaceNeeded between widthDifference and the average column width
// calculate the scaling required to create the extraSpaceNeeded
// convert that scaling factor into an absolute value
// subtract that absolute value from the canvasHeight
// return block placement

// settings gaps seems to break centering on canvas

// todo: sometimes when resizing blocks to use more width you use *most* of the width but lose a lot of height
// this is an easy fix by fixing the maxHeightRatio i think of just the parent blocks
// since our Y size is no longer always 100% of the canvas we need to update the yOffset to account for this
// only really works well at wide aspect ratios currently since you are checking against the width for re-renders. updating to dynamically switch could help a lot here




// TODO: 
// our images can not be rotated
// our images can be resized
// we will attempt to resize to fill as much space as possible
// we will use greedy placement as the starting point

// ideas:
// Reduce all image sizes to a 1:x aspect ratio to make the math easier to understand
// set the first image, subtract the width and height from the overall aspect ratio (size of our canvas)
// so in this case a 100x100 -> 1:1,
// we cant just subtract to get 15:9 because that is the largest remaining rectangle NOT the total remaining space (would leave and empty column and an empty row adjacent to the placed image

// we can combine blocks in an attempt to create one larger block that more closely matches a desirable aspect ratio
// for instance, the total canvas can be split into X number of sections where X%2 == 0
// we can then take the number of sections, calculate the aspect ratios of those sections, then combine blocks to create those sections to minimize the number of blocks that need to be placed/confirmed at a given time
// we would need to decide on some way to choose a starting place for determining the number of blocks. 
// we could also use recursion for placement here, once a block or section is placed we can split the remaining space into two separate sections
// we can use the aspect ratios of the remaining blocks as a heuristic to decide how to do this split (should aspect ratios of the newly created sections be taller or wider? we could decide based on whether we have more tall or wide aspect ratios left to place but this could lead to weird edge cases when the Y space available under a placed block is very small)
// maybe a better heuristic would be to figure the total possible area that could be filled if all remaining blocks were placed inside each newly created block
// do this for both blocks to calculate a theoretical maximum
// track the minimum of blockMax1 and blockMax2, then calculate for the other configuration and track the new minimum. Whichever configuration has the lower minimum blockMax will be discarded
// now we have a new smaller block to pack. we can start calling the placement function recursively to greedily place the largest image by area, figure out
// we need to decide if we are going to fill horizontally first or fill vertically first
// we need to do something to make sure we are filling the MAXIMUM amount of space possible because we could always just size everything down (lame) to fit in one row/column

// we will size everything down to a 1:x aspect ratio
// we will put images together in blocks and combine blocks to target the canvas aspect ratio






// We will need a way to make sure we dont combine blocks with other blocks when it isnt required
// dont forget to set block.type = "block" when creating a new collection of images
// when creating a new block we need a decision tree for deciding in which order to combine blocks
// possible order:
// we should calculate the currentDifference between the target ratio and the current size. check how much space is saved by creating the new block. if the amount of spaceSaved is greater than the currentDifference then mark as a candidate for block creation. Check other possible block configurations, if the difference between the newSpaceSaved is less than the previous spaceSaved while still satisfying the requirement that spaceSaved > currentDifference then discard the previous block candidate in favor of the new one.
// if there are no block candidates satisfying the previous criteria then we fall back to choosing a second item for the block with a ratio that most closely matches the targetRatio. this helps ensure minimal downscaling so we can take up as much space as possible

// abandonned
// Idea:
// we could calculate the average width ratio of each block and then choose to get the closest or farthest ratio based on which column is nearest or farthest from the average




