CLI argument conventions

https://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces
https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html

On POSIX systems (e.g. Linux, MacOSX), at least for programs possibly started in a shell terminal (e.g. most of them), I would recommend using the GNU coding conventions (which also lists common argument names) and look into the POSIX utilities guidelines, even for proprietary software:

    always handle --version and --help (even /bin/true accepts them!!). I curse the authors of software not understanding --help, I hate them (because prog --help is the first command I am trying on a new program)! Often --help can be abbreviated as -h

    Have the --help message list all the options (unless you have too many of them... in that case list the most common ones and explicitly refer to some man page or some URL) and default values of options, and perhaps important (and program-specific) environment variables. Show these option lists on option argument error.

    accept -a short argument (single letter) and have some equivalent --long-argument, so -a2 --long-argument=2, --long-argument 2; of course you could have (for rarely used options) some --only-long-argument name; for modal arguments without extra options -cf is generally handled as -c -f, etc. so your -argument:value proposal is weird, and I don't recommend doing that.

    use GLIBC getopt_long or better (e.g. argp_parse, in OCaml it's Arg module, ...)

    often use - for standard input or output (if you can't do that, handle /dev/stdin & /dev/stdout even on the few operating systems not having them)

    mimic the behavior of similar programs by reusing most of their options conventions; in particular -n for dry run (à la make), -h for help, -v for verbosity, etc...

    use -- as separator between options & file or other arguments

    if your program uses isatty to test than stdin is a terminal (and behave "interactively" in that case), provide an option to force non-interactive mode, likewise if your program has a GUI interface (and tests getenv("DISPLAY") on X11 desktop) but could also be used in batch or command line.

    Some programs (e.g. gcc) accept indirect argument lists, so @somefile.txt is meaning read program arguments from somefile.txt; this could be useful when your program might accept a very big lot of arguments (more than your kernel's ARG_MAX)

BTW, you might even add some auto-complete facilities for your program and usual shells (like bash or zsh)

Some old Unix commands (e.g. dd, or even sed) have weird command arguments for historical compatibility. I would recommend not following their bad habits (unless you are making some better variant of them).

If your software is a series of related command-line programs, take inspiration from git (which you surely use as a development tool), which accepts git help and git --help and have many gitsubcommand and gitsubcommand--help

In rare cases you might also use argv[0] (by using symlinks on your program), e.g. bash invoked as rbash has a different behavior (restricted shell). But I usually don't recommend doing that; it might make sense if your program could be used as a script interpreter using shebang i.e. #! on first line interpreted by execve(2). If you do such tricks, be sure to document them, including in --help messages.

Remember that on POSIX the shell is globbing arguments (before running your program!), so avoid requiring characters (like * or $ or ~) in options which would need to be shell-escaped.

In some cases, you could embed an interpreter like GNU guile or Lua in your software (avoid inventing your own Turing-complete scripting language if you are not expert in programming languages). This has deep consequences on the design of your software (so should be thought of early!). You should then easily be able to pass some script or some expression to that interpreter. If you take that interesting approach, design your software and its interpreted primitives with care; you could have some weird user coding big scripts for your thing.

In other cases, you might want to let your advanced users load their plugin into your software (using dynamic loading techniques à la dlopen & dlsym). Again, this is a very important design decision (so define and document the plugin interface with care), and you'll need to define a convention to pass program options to these plugins.

If your software is a complex thing, make it accept some configuration files (in addition or replacement of program arguments) and probably have some way to test (or just parse) these configuration files without running all the code. For example, a mail transfer agent (like Exim or Postfix) is quite complex, and it is useful to be able to "half-dry" run it (e.g. observing how it is handling some given email address without actually sending an email).

// Current problems:
subtle sizing issues at final placing. maybe due to how we are applying scaling factors when accounting for gaps??

// fixed:
// doesnt make perfect use of horizontal space since it always fills the entire vertical space
// the same arrangement of blocks fills the horizontal space better when the height is shorter
// this is because the shorter height forces block resizing, at some point blocks resize enough to make room for another column
// we can probably calculate roughly when this will happen and recursively change the canvas height 
// we could start by calculating the average column width and using that as a target
// get the widthDifference between all block widths and total canvas width
// get the extraSpaceNeeded between widthDifference and the average column width
// calculate the scaling required to create the extraSpaceNeeded
// convert that scaling factor into an absolute value
// subtract that absolute value from the canvasHeight
// return block placement
// setting gaps seems to break centering on canvas
// sometimes when resizing blocks to use more width you use *most* of the width but lose a lot of height
// this is an easy fix by fixing the maxHeightRatio i think of just the parent blocks
// since our Y size is no longer always 100% of the canvas we need to update the yOffset to account for this
// only really works well at wide aspect ratios currently since you are checking against the width for re-renders. updating to dynamically switch could help a lot here

// ideas:
// Reduce all image sizes to a 1:x aspect ratio to make the math easier to understand


// we can combine blocks in an attempt to create one larger block that more closely matches a desirable aspect ratio
// for instance, the total canvas can be split into X number of sections where X%2 == 0
// we can then take the number of sections, calculate the aspect ratios of those sections, then combine blocks to create those sections to minimize the number of blocks that need to be placed/confirmed at a given time
// we would need to decide on some way to choose a starting place for determining the number of blocks. 
// we could also use recursion for placement here, once a block or section is placed we can split the remaining space into two separate sections
// we can use the aspect ratios of the remaining blocks as a heuristic to decide how to do this split (should aspect ratios of the newly created sections be taller or wider? we could decide based on whether we have more tall or wide aspect ratios left to place but this could lead to weird edge cases when the Y space available under a placed block is very small)
// maybe a better heuristic would be to figure the total possible area that could be filled if all remaining blocks were placed inside each newly created block
// do this for both blocks to calculate a theoretical maximum
// track the minimum of blockMax1 and blockMax2, then calculate for the other configuration and track the new minimum. Whichever configuration has the lower minimum blockMax will be discarded
// now we have a new smaller block to pack. we can start calling the placement function recursively to greedily place the largest image by area, figure out
// we need to decide if we are going to fill horizontally first or fill vertically first
// we need to do something to make sure we are filling the MAXIMUM amount of space possible because we could always just size everything down (lame) to fit in one row/column

// we will size everything down to a 1:x aspect ratio
// we will put images together in blocks and combine blocks to target the canvas aspect ratio

// We will need a way to make sure we dont combine blocks with other blocks when it isnt required
// dont forget to set block.type = "block" when creating a new collection of images
// when creating a new block we need a decision tree for deciding in which order to combine blocks
// possible order:
// we should calculate the currentDifference between the target ratio and the current size. check how much space is saved by creating the new block. if the amount of spaceSaved is greater than the currentDifference then mark as a candidate for block creation. Check other possible block configurations, if the difference between the newSpaceSaved is less than the previous spaceSaved while still satisfying the requirement that spaceSaved > currentDifference then discard the previous block candidate in favor of the new one.
// if there are no block candidates satisfying the previous criteria then we fall back to choosing a second item for the block with a ratio that most closely matches the targetRatio. this helps ensure minimal downscaling so we can take up as much space as possible

// abandonned
// Idea:
// we could calculate the average width ratio of each block and then choose to get the closest or farthest ratio based on which column is nearest or farthest from the average
// set the first image, subtract the width and height from the overall aspect ratio (size of our canvas)
// so in this case a 100x100 -> 1:1,
// we cant just subtract to get 15:9 because that is the largest remaining rectangle NOT the total remaining space (would leave and empty column and an empty row adjacent to the placed image